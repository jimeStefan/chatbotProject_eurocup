/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.CognitiveservicesLuisRuntime = {}),global.msRest));
}(this, (function (exports,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({

    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var Intent = {
        serializedName: "Intent",
        type: {
            name: "Composite",
            className: "Intent",
            modelProperties: {
                score: {
                    serializedName: "score",
                    type: {
                        name: "Number"
                    }
                },
                childApp: {
                    serializedName: "childApp",
                    type: {
                        name: "Composite",
                        className: "Prediction"
                    }
                }
            }
        }
    };
    var Sentiment = {
        serializedName: "Sentiment",
        type: {
            name: "Composite",
            className: "Sentiment",
            modelProperties: {
                label: {
                    serializedName: "label",
                    type: {
                        name: "String"
                    }
                },
                score: {
                    required: true,
                    serializedName: "score",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Prediction = {
        serializedName: "Prediction",
        type: {
            name: "Composite",
            className: "Prediction",
            modelProperties: {
                alteredQuery: {
                    serializedName: "alteredQuery",
                    type: {
                        name: "String"
                    }
                },
                topIntent: {
                    required: true,
                    serializedName: "topIntent",
                    type: {
                        name: "String"
                    }
                },
                intents: {
                    required: true,
                    serializedName: "intents",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "Intent"
                            }
                        }
                    }
                },
                entities: {
                    required: true,
                    serializedName: "entities",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                },
                sentiment: {
                    serializedName: "sentiment",
                    type: {
                        name: "Composite",
                        className: "Sentiment"
                    }
                }
            }
        }
    };
    var PredictionResponse = {
        serializedName: "PredictionResponse",
        type: {
            name: "Composite",
            className: "PredictionResponse",
            modelProperties: {
                query: {
                    required: true,
                    serializedName: "query",
                    type: {
                        name: "String"
                    }
                },
                prediction: {
                    required: true,
                    serializedName: "prediction",
                    type: {
                        name: "Composite",
                        className: "Prediction"
                    }
                }
            }
        }
    };
    var ErrorBody = {
        serializedName: "ErrorBody",
        type: {
            name: "Composite",
            className: "ErrorBody",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorModel = {
        serializedName: "Error",
        type: {
            name: "Composite",
            className: "ErrorModel",
            modelProperties: {
                error: {
                    required: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorBody"
                    }
                }
            }
        }
    };
    var PredictionRequestOptions = {
        serializedName: "PredictionRequestOptions",
        type: {
            name: "Composite",
            className: "PredictionRequestOptions",
            modelProperties: {
                datetimeReference: {
                    serializedName: "datetimeReference",
                    type: {
                        name: "DateTime"
                    }
                },
                preferExternalEntities: {
                    serializedName: "preferExternalEntities",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ExternalEntity = {
        serializedName: "ExternalEntity",
        type: {
            name: "Composite",
            className: "ExternalEntity",
            modelProperties: {
                entityName: {
                    required: true,
                    serializedName: "entityName",
                    type: {
                        name: "String"
                    }
                },
                startIndex: {
                    required: true,
                    serializedName: "startIndex",
                    type: {
                        name: "Number"
                    }
                },
                entityLength: {
                    required: true,
                    serializedName: "entityLength",
                    type: {
                        name: "Number"
                    }
                },
                resolution: {
                    serializedName: "resolution",
                    type: {
                        name: "Object"
                    }
                },
                score: {
                    serializedName: "score",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var RequestList = {
        serializedName: "RequestList",
        type: {
            name: "Composite",
            className: "RequestList",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                canonicalForm: {
                    required: true,
                    serializedName: "canonicalForm",
                    type: {
                        name: "String"
                    }
                },
                synonyms: {
                    serializedName: "synonyms",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var DynamicList = {
        serializedName: "DynamicList",
        type: {
            name: "Composite",
            className: "DynamicList",
            modelProperties: {
                listEntityName: {
                    required: true,
                    serializedName: "listEntityName",
                    type: {
                        name: "String"
                    }
                },
                requestLists: {
                    required: true,
                    serializedName: "requestLists",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RequestList"
                            }
                        }
                    }
                }
            }
        }
    };
    var PredictionRequest = {
        serializedName: "PredictionRequest",
        type: {
            name: "Composite",
            className: "PredictionRequest",
            modelProperties: {
                query: {
                    required: true,
                    serializedName: "query",
                    type: {
                        name: "String"
                    }
                },
                options: {
                    serializedName: "options",
                    type: {
                        name: "Composite",
                        className: "PredictionRequestOptions"
                    }
                },
                externalEntities: {
                    serializedName: "externalEntities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExternalEntity"
                            }
                        }
                    }
                },
                dynamicLists: {
                    serializedName: "dynamicLists",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DynamicList"
                            }
                        }
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        Intent: Intent,
        Sentiment: Sentiment,
        Prediction: Prediction,
        PredictionResponse: PredictionResponse,
        ErrorBody: ErrorBody,
        ErrorModel: ErrorModel,
        PredictionRequestOptions: PredictionRequestOptions,
        ExternalEntity: ExternalEntity,
        RequestList: RequestList,
        DynamicList: DynamicList,
        PredictionRequest: PredictionRequest
    });

    /*
      * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        DynamicList: DynamicList,
        ErrorBody: ErrorBody,
        ErrorModel: ErrorModel,
        ExternalEntity: ExternalEntity,
        Intent: Intent,
        Prediction: Prediction,
        PredictionRequest: PredictionRequest,
        PredictionRequestOptions: PredictionRequestOptions,
        PredictionResponse: PredictionResponse,
        RequestList: RequestList,
        Sentiment: Sentiment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var appId = {
        parameterPath: "appId",
        mapper: {
            required: true,
            serializedName: "appId",
            type: {
                name: "Uuid"
            }
        }
    };
    var endpoint = {
        parameterPath: "endpoint",
        mapper: {
            required: true,
            serializedName: "Endpoint",
            defaultValue: '',
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var log = {
        parameterPath: [
            "options",
            "log"
        ],
        mapper: {
            serializedName: "log",
            type: {
                name: "Boolean"
            }
        }
    };
    var showAllIntents = {
        parameterPath: [
            "options",
            "showAllIntents"
        ],
        mapper: {
            serializedName: "show-all-intents",
            type: {
                name: "Boolean"
            }
        }
    };
    var slotName = {
        parameterPath: "slotName",
        mapper: {
            required: true,
            serializedName: "slotName",
            type: {
                name: "String"
            }
        }
    };
    var verbose = {
        parameterPath: [
            "options",
            "verbose"
        ],
        mapper: {
            serializedName: "verbose",
            type: {
                name: "Boolean"
            }
        }
    };
    var versionId = {
        parameterPath: "versionId",
        mapper: {
            required: true,
            serializedName: "versionId",
            type: {
                name: "String"
            }
        }
    };

    /*
      * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PredictionOperations. */
    var PredictionOperations = /** @class */ (function () {
        /**
         * Create a PredictionOperations.
         * @param {LUISRuntimeClientContext} client Reference to the service client.
         */
        function PredictionOperations(client) {
            this.client = client;
        }
        PredictionOperations.prototype.getVersionPrediction = function (appId$$1, versionId$$1, predictionRequest, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId$$1,
                predictionRequest: predictionRequest,
                options: options
            }, getVersionPredictionOperationSpec, callback);
        };
        PredictionOperations.prototype.getSlotPrediction = function (appId$$1, slotName$$1, predictionRequest, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                slotName: slotName$$1,
                predictionRequest: predictionRequest,
                options: options
            }, getSlotPredictionOperationSpec, callback);
        };
        return PredictionOperations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var getVersionPredictionOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/predict",
        urlParameters: [
            endpoint,
            appId,
            versionId
        ],
        queryParameters: [
            verbose,
            showAllIntents,
            log
        ],
        requestBody: {
            parameterPath: "predictionRequest",
            mapper: __assign(__assign({}, PredictionRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PredictionResponse
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var getSlotPredictionOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/slots/{slotName}/predict",
        urlParameters: [
            endpoint,
            appId,
            slotName
        ],
        queryParameters: [
            verbose,
            showAllIntents,
            log
        ],
        requestBody: {
            parameterPath: "predictionRequest",
            mapper: __assign(__assign({}, PredictionRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PredictionResponse
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };

    /*
      * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/cognitiveservices-luis-runtime";
    var packageVersion = "4.0.1";
    var LUISRuntimeClientContext = /** @class */ (function (_super) {
        __extends(LUISRuntimeClientContext, _super);
        /**
         * Initializes a new instance of the LUISRuntimeClientContext class.
         * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
         * https://westus.api.cognitive.microsoft.com).
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function LUISRuntimeClientContext(credentials, endpoint, options) {
            var _this = this;
            if (endpoint == undefined) {
                throw new Error("'endpoint' cannot be null.");
            }
            if (credentials == undefined) {
                throw new Error("'credentials' cannot be null.");
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRest.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.baseUri = "{Endpoint}/luis/prediction/v3.0";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.endpoint = endpoint;
            _this.credentials = credentials;
            return _this;
        }
        return LUISRuntimeClientContext;
    }(msRest.ServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var LUISRuntimeClient = /** @class */ (function (_super) {
        __extends(LUISRuntimeClient, _super);
        /**
         * Initializes a new instance of the LUISRuntimeClient class.
         * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
         * https://westus.api.cognitive.microsoft.com).
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function LUISRuntimeClient(credentials, endpoint, options) {
            var _this = _super.call(this, credentials, endpoint, options) || this;
            _this.prediction = new PredictionOperations(_this);
            return _this;
        }
        return LUISRuntimeClient;
    }(LUISRuntimeClientContext));

    exports.LUISRuntimeClient = LUISRuntimeClient;
    exports.LUISRuntimeClientContext = LUISRuntimeClientContext;
    exports.LUISRuntimeModels = index;
    exports.LUISRuntimeMappers = mappers;
    exports.PredictionOperations = PredictionOperations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=cognitiveservices-luis-runtime.js.map
