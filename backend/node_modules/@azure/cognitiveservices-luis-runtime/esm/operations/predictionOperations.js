/*
  * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/predictionOperationsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a PredictionOperations. */
var PredictionOperations = /** @class */ (function () {
    /**
     * Create a PredictionOperations.
     * @param {LUISRuntimeClientContext} client Reference to the service client.
     */
    function PredictionOperations(client) {
        this.client = client;
    }
    PredictionOperations.prototype.getVersionPrediction = function (appId, versionId, predictionRequest, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            predictionRequest: predictionRequest,
            options: options
        }, getVersionPredictionOperationSpec, callback);
    };
    PredictionOperations.prototype.getSlotPrediction = function (appId, slotName, predictionRequest, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            slotName: slotName,
            predictionRequest: predictionRequest,
            options: options
        }, getSlotPredictionOperationSpec, callback);
    };
    return PredictionOperations;
}());
export { PredictionOperations };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getVersionPredictionOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/predict",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId
    ],
    queryParameters: [
        Parameters.verbose,
        Parameters.showAllIntents,
        Parameters.log
    ],
    requestBody: {
        parameterPath: "predictionRequest",
        mapper: __assign(__assign({}, Mappers.PredictionRequest), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.PredictionResponse
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    serializer: serializer
};
var getSlotPredictionOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/slots/{slotName}/predict",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.slotName
    ],
    queryParameters: [
        Parameters.verbose,
        Parameters.showAllIntents,
        Parameters.log
    ],
    requestBody: {
        parameterPath: "predictionRequest",
        mapper: __assign(__assign({}, Mappers.PredictionRequest), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.PredictionResponse
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    serializer: serializer
};
//# sourceMappingURL=predictionOperations.js.map